// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  birthDate DateTime
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageURL  String?
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  answers   Answer[]
}

model Company {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  email         String        @unique
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  logoURL       String?
  employees     Employee[]
  items         Item[]
}

model Item {
  id                Int               @id @default(autoincrement())
  name              String?
  description       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  category          ItemCategory?
  fee               Float?
  feeType           String?
  maxDuration       Int?
  maxDurationType   String?
  imageURL          String?
  deposit           Float?
  overallReview     Int?
  company           Company           @relation(fields: [companyId], references: [id])
  companyId         Int
  reviews           Review[]
  ownerApplication  OwnerApplication?
  stockStatus       StockStatus?
  conversations     Conversation[]
}

enum ItemCategory {
  FURNITURE
  MUSIC
  TOOL
}

model Review {
  id        Int      @id @default(autoincrement())
  title     String
  contents  String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
}

model OwnerApplication {
  id        Int               @id @default(autoincrement())
  status    ApplicationStatus
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  item      Item              @relation(fields: [itemId], references: [id])
  itemId    Int               @unique
}

enum ApplicationStatus {
  APPLIED
  DECLINED
  ACCEPTED
}

model StockStatus {
  id           Int  @id @default(autoincrement())
  totalStock   Int?
  currentStock Int?
  item         Item @relation(fields: [itemId], references: [id])
  itemId       Int  @unique
}

model Conversation {
  id        Int      @id @default(autoincrement())
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  questions Question[]
  answers   Answer[]
}

model Question {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  contents       String    
  createdAt      DateTime     @default(now())
  answer         Answer?      @relation(fields: [answerId], references: [id])
  answerId       Int?         @unique
}

model Answer {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  contents       String    
  createdAt      DateTime     @default(now())
  replyTo        Question?
  sender         Employee     @relation(fields: [senderId], references: [id])
  senderId       Int
}