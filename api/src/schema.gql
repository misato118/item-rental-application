# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Owner application status for an item"""
enum ApplicationStatus {
  """When an owner application is declined."""
  DECLINED

  """When an owner created an item but has not applied yet."""
  DRAFT

  """When an owner applied to publish an item."""
  PENDING

  """When an owner application is accepted and published"""
  PUBLISHED
}

input ChangeRenterAppStatusInput {
  id: Int!
  status: RenterApplicationStatusType!
}

type Company {
  createdAt: DateTime!
  description: String!
  email: String!
  employees: [Employee!]
  id: Int!
  items: [Item!]
  logoURL: String
  name: String!
  updatedAt: DateTime!
}

input CreateCompanyInput {
  description: String!
  email: String!
  logoURL: String!
  name: String!
}

input CreateEmployeeInput {
  birthDate: DateTime!

  """The name of a company this employee works for"""
  company: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input CreateFormInput {
  itemId: Int!
  offeringDuration: Int!
  offeringPrice: Float!
  renterId: Int!
}

input CreateItemInput {
  category: ItemCategory
  company: String!
  currentStock: Int
  deposit: Float
  description: String
  fee: Float
  feeType: String
  id: Int
  imageURL: String
  maxDuration: Int
  maxDurationType: String
  name: String
  totalStock: Int
}

input CreateRenterInput {
  birthDate: String
  email: String!
  firstName: String!
  imageURL: String
  lastName: String!
  password: String!
  username: String!
}

input CreateReviewInput {
  contents: String!
  itemId: Int!
  rating: Int!
  title: String!
}

input CreateStockStatusInput {
  currentStock: Int!
  itemId: Int!
  totalStock: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Employee {
  birthDate: DateTime!
  company: Company!
  companyId: Int!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: Int!
  imageURL: String
  lastName: String!
  password: String!
  updatedAt: DateTime!
}

input FilterItemInput {
  durationType: String
  maxDuration: Int
  maxPrice: Int
  priceType: String
}

type Form {
  id: Int!
  offeringDuration: Int!
  offeringPrice: Float!
  renterApplication: RenterApplication!
}

type Item {
  category: ItemCategory
  company: Company!
  companyId: Int!
  createdAt: DateTime!
  deposit: Int
  description: String
  fee: Float
  feeType: String
  id: Int!
  imageURL: String
  maxDuration: Int
  maxDurationType: String
  name: String
  ownerApplication: OwnerApplication!
  renterApplications: [RenterApplication!]
  reviews: [Review!]
  stockStatus: StockStatus
  updatedAt: DateTime!
}

"""The item types"""
enum ItemCategory {
  """Any furniture."""
  FURNITURE

  """Anything related to music such as instruments, scores, etc."""
  MUSIC

  """Any tools."""
  TOOL
}

input LoginEmployeeInput {
  password: String!
  username: String!
}

input LoginRenterInput {
  password: String!
  username: String!
}

type Mutation {
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  createEmployee(createEmployeeInput: CreateEmployeeInput!): Employee!
  createItem(createItemInput: CreateItemInput!): Company!
  createRenter(createRenterInput: CreateRenterInput!): Renter!
  createRenterApplication(createRenterApplicationInput: CreateFormInput!): RenterApplication!
  createReview(createReviewInput: CreateReviewInput!): Item!
  createStockStatus(createStockStatusInput: CreateStockStatusInput!): Item!
  deleteConversations(itemId: Int!): Int!
  deleteItem(itemId: Int!): Item!
  deleteOwnerApplications(itemId: Int!): Int!
  deleteRenterApplications(itemId: Int!): Int!
  deleteReviews(itemId: Int!): Int!
  deleteStockStatuses(itemId: Int!): Int!
  saveAllRenterAppStatuses(saveAllRenterAppStatusesInput: SaveAllRenterAppStatusesInput!): Boolean!
  submitItem(createItemInput: CreateItemInput!): Item!
  updateItem(createItemInput: CreateItemInput!): Item!
}

type OwnerApplication {
  createdAt: DateTime!
  id: Int!
  status: ApplicationStatus!
  updatedAt: DateTime!
}

type Query {
  companies: [Company!]!
  companyInfo(companyName: String!): Company!
  employeeId(loginEmployeeInput: LoginEmployeeInput!): Employee!
  employeeInfo(employeeId: Int!): Employee!
  employees: [Employee!]!
  itemByCompany(companyName: String!): Company!
  itemCategories: [ItemCategory!]!
  itemInfo(itemId: Int!): Item
  items(filter: FilterItemInput): [Item!]!
  ownerApplication(itemId: Int!): OwnerApplication!
  renterApplications: [RenterApplication!]!
  renterId(loginRenterInput: LoginRenterInput!): Renter!
  renterInfo(renterId: Int!): Renter!
  renters: [Renter!]!
  reviews: [Review!]!
  stockStatus(itemId: Int!): StockStatus!
}

type Renter {
  birthDate: DateTime
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: Int!
  imageURL: String
  lastName: String!
  password: String!
  renterApplications: [RenterApplication!]!
  updatedAt: DateTime!
  username: String!
}

type RenterApplication {
  createdAt: DateTime!
  form: Form
  formId: Int!
  id: Int!
  item: Item
  itemId: Int!
  renter: Renter!
  renterApplicationStatuses: [RenterApplicationStatus!]
  renterId: Int!
}

type RenterApplicationStatus {
  id: Int!
  renterApplication: RenterApplication!
  renterApplicationId: Int!
  status: RenterApplicationStatusType!
  updatedAt: DateTime!
}

"""Application status for a renter application"""
enum RenterApplicationStatusType {
  """When a renter application is accepted."""
  ACCEPTED

  """When a renter applied for an item."""
  APPLIED

  """When an item is returned to a company."""
  COMPLETED

  """When a renter application is declined."""
  DECLINED

  """When an item is delivered by a company."""
  DELIVERED

  """When an item is arrived at a renter."""
  RENTED

  """When a renter returns an item back to a company."""
  RETURNED
}

type Review {
  contents: String!
  createdAt: DateTime!
  id: Int!
  item: Item!
  itemId: Int!
  rating: Int!
  title: String!
  updatedAt: DateTime!
}

input SaveAllRenterAppStatusesInput {
  appStatusArr: [ChangeRenterAppStatusInput!]!
}

type StockStatus {
  currentStock: Int!
  id: Int!
  item: Item!
  itemId: Int!
  totalStock: Int!
}